/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "itunesstored-Structs.h"
#import "DownloadSessionDelegate.h"
#import "ISOperationDelegate.h"
#import <Foundation/NSObject.h>

@class SSOperationProgress, ISOperation, NSString, NSArray, DownloadSession;
@protocol PipelineDownloadDelegate;

__attribute__((visibility("hidden")))
@interface PipelineDownload : NSObject <DownloadSessionDelegate, ISOperationDelegate> {
	NSString* _clientID;
	BOOL _clientIsApplication;
	int _currentStepIndex;
	id<PipelineDownloadDelegate> _delegate;
	long long _downloadID;
	dispatch_queue_s* _dispatchQueue;
	NSString* _downloadKind;
	DownloadSession* _downloadSession;
	int _downloadState;
	NSArray* _downloadSteps;
	long long _handlerID;
	BOOL _isAutomatic;
	BOOL _isCellularRestricted;
	BOOL _isInStoreQueue;
	BOOL _isRestore;
	int _lastPhaseSetIndex;
	double _lastProgressUpdate;
	ISOperation* _operation;
	SSOperationProgress* _progress;
	dispatch_source_s* _progressTimer;
	dispatch_source_s* _sessionDisconnectTimer;
}
@property(readonly, assign, getter=isWaitingToStart) BOOL waitingToStart;
@property(readonly, assign) BOOL needsPowerAssertion;
@property(readonly, assign) BOOL canBePaused;
@property(assign) long long downloadHandlerIdentifier;
@property(assign) id<PipelineDownloadDelegate> delegate;
@property(readonly, assign) int downloadState;
@property(readonly, assign) int downloadSlotType;
@property(readonly, assign) long long downloadIdentifier;
+(void)_resetRetryCountForDownloadID:(long long)downloadID;
+(int)_incrementRetryCountForReason:(int)reason downloadID:(long long)anId;
-(void)_startProgressTimer;
-(void)_showDialogForError:(id)error;
-(BOOL)_shouldScheduleRestoreRetryForError:(id)error;
-(BOOL)_shouldBlockDownloadWithReason:(int*)reason;
-(void)_setStepProgress:(double)progress forceCommit:(BOOL)commit;
-(void)_setErrorProperties:(id)properties inDictionary:(id)dictionary;
-(void)_setDownloadState:(int)state;
-(void)_setDownloadPhase:(id)phase error:(id)error;
-(void)_sendStateChangeToDelegate;
-(void)_resetDownloadState;
-(void)_requestWakeupForNetworkConstraintError:(id)networkConstraintError;
-(void)_releaseSessionControl;
-(void)_releaseOperation;
-(void)_prepareDownloadState;
-(void)_performNextStepIfNotInIPodLibrary;
-(void)_performNextStep;
-(id)_openDownloadSessionWithStep:(id)step;
-(id)_newDownloadSessionPropertiesWithStep:(id)step;
-(BOOL)_isNextStepBlocking;
-(BOOL)_isContentRestricted;
-(BOOL)_isClientInstalled;
-(void)_finishDownloadWithPhase:(id)phase error:(id)error;
-(void)_finishCurrentStepBySkipping:(BOOL)skipping;
-(void)_failCurrentStepWithError:(id)error;
-(BOOL)_errorIsTransient:(id)transient;
-(BOOL)_errorIsLimitedTransient:(id)transient;
-(void)_enqueueOperationForStep:(id)step;
-(void)_dispatchGlobal:(id)global completionBlock:(id)block;
-(id)_copyDownloadSteps;
-(void)_commitThrottledProgress:(BOOL)progress;
-(void)_commitProgress:(id)progress;
-(void)_closeDownloadSession;
-(BOOL)_checkNetworkConstraintsForStep:(id)step error:(id*)error;
-(void)_checkNetworkConstraintsForStep:(id)step;
-(BOOL)_canOpenDownloadHandlerSession;
-(BOOL)_canHandleAllDownloadSteps;
-(void)_cancelWithPipelineState:(int)pipelineState waitUntilIdle:(BOOL)idle;
-(void)_cancelWithPipelineState:(int)pipelineState;
-(void)_cancelSessionDisconnectTimer;
-(void)_cancelProgressTimer;
-(void)_cancelForPowerConstraints;
-(void)_cancelForContentRestriction;
-(void)_blockDownloadWithReason:(int)reason;
-(void)_beginDownloadSession:(id)session;
-(void)_attemptRestoreAfterError:(id)error;
-(void)_attemptRedownloadAfterError:(id)error;
-(void)_attemptNextStep;
-(void)_applyPhaseFromCurrentStepWithCompletionBlock:(id)completionBlock;
-(void)_addFailureToRestoreStatisticsWithError:(id)error;
-(id)description;
-(void)_softwareMapChangedNotification:(id)notification;
-(void)_cellularConstraintsChanged:(id)changed;
-(void)operationWillStart:(id)operation;
-(void)operationFinished:(id)finished;
-(void)operation:(id)operation updatedProgress:(id)progress;
-(void)operation:(id)operation failedWithError:(id)error;
-(void)downloadSession:(id)session didUpdateProgress:(double)progress;
-(void)downloadSession:(id)session didFailWithError:(id)error;
-(void)downloadSession:(id)session didDisavowWithError:(id)error;
-(void)downloadSession:(id)session didChangeStatusDescription:(id)description;
-(void)downloadSessionPropertiesDidChange:(id)downloadSessionProperties;
-(void)downloadSessionDidRelease:(id)downloadSession;
-(void)downloadSessionDidFinish:(id)downloadSession;
-(void)downloadSessionDidDisconnect:(id)downloadSession;
-(void)waitUntilIdle;
-(void)stop;
-(void)resetAfterReevaluation;
-(void)reevaluateAndWaitUntilIdle:(BOOL)idle;
-(void)performNextStep;
-(void)finishWithDownloadPhase:(id)downloadPhase error:(id)error;
-(void)checkConstraintsWithTypes:(int)types;
-(void)cancelIfHandlerAvailabile;
-(void)cancelAndWaitUntilIdle:(BOOL)idle;
-(void)dealloc;
-(id)initWithDownloadIdentifier:(long long)downloadIdentifier;
-(id)init;
@end

